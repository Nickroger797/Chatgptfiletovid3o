import logging
import os
import ffmpeg
import database
from pyrogram import Client, filters
from config import API_ID, API_HASH, BOT_TOKEN
from pymongo import MongoClient
from config import MONGO_URL

# ‚úÖ Debugging Mode Enable
logging.basicConfig(level=logging.DEBUG)

# ‚úÖ MongoDB Connection
try:
    client = MongoClient(MONGO_URL)
    db = client["video_converter"]
    users_col = db["users"]
    logs_col = db["conversion_logs"]
    client.server_info()
    print("‚úÖ MongoDB Connected Successfully!")
except Exception as e:
    print("‚ùå MongoDB Connection Error:", e)
    exit(1)

# ‚úÖ Initialize Bot
bot = Client(
    "video_converter_bot",
    api_id=API_ID,
    api_hash=API_HASH,
    bot_token=BOT_TOKEN
)

# ‚úÖ Start Command
@bot.on_message(filters.command("start"))
async def start_handler(client, message):
    user_id = message.from_user.id
    users_col.update_one({"user_id": user_id}, {"$set": {"user_id": user_id}}, upsert=True)
    await message.reply_text("üëã Welcome! Send me a video file, and I'll convert it to Telegram's gallery mode.")

# ‚úÖ Convert Video Function
def convert_video(input_path):
    output_path = input_path.replace(".mp4", "_converted.mp4")  # ‡§®‡§Ø‡§æ ‡§®‡§æ‡§Æ
    try:
        ffmpeg.input(input_path).output(output_path, vcodec="libx264", preset="ultrafast").run()
        return output_path
    except Exception as e:
        logging.error(f"FFmpeg Error: {e}")
        return None

# ‚úÖ Video Convert Handler
@bot.on_message(filters.video | filters.document)
async def convert_handler(client, message):
    user_id = message.from_user.id

    if not message.video and not message.document:
        await message.reply_text("‚ö†Ô∏è Please send a video file.")
        return

    # ‚úÖ ‡§∏‡§¨‡§∏‡•á ‡§™‡§π‡§≤‡•á ‡§Ø‡•Ç‡§ú‡§º‡§∞ ‡§ï‡•ã ‡§∞‡§ø‡§™‡•ç‡§≤‡§æ‡§à ‡§ï‡§∞‡•ã ‡§ï‡§ø ‡§µ‡•Ä‡§°‡§ø‡§Ø‡•ã ‡§ï‡§®‡•ç‡§µ‡§∞‡•ç‡§ü ‡§π‡•ã ‡§∞‡§π‡•Ä ‡§π‡•à
    processing_msg = await message.reply_text("‚è≥ Your file is being converted, please wait...")

    file_path = await message.download()
    output_path = convert_video(file_path)

    if output_path:
        await client.send_video(
            chat_id=message.chat.id,
            video=output_path,
            caption="‚úÖ Here is your converted video!",
            supports_streaming=True
        )
        os.remove(file_path)
        os.remove(output_path)
        logs_col.insert_one({"user_id": user_id, "status": "converted"})
    else:
        await message.reply_text("‚ùå Conversion failed. Please try again.")

    # ‚úÖ "Converting..." ‡§µ‡§æ‡§≤‡•á message ‡§ï‡•ã ‡§π‡§ü‡§æ ‡§¶‡•ã
    await processing_msg.delete()

# ‚úÖ Stats Command
@bot.on_message(filters.command("stats"))
async def stats_handler(client, message):
    total_users = users_col.count_documents({})
    total_conversions = logs_col.count_documents({})
    await message.reply_text(f"üìä **Bot Stats**:\nüë• Total Users: {total_users}\nüé• Total Conversions: {total_conversions}")

# ‚úÖ Run Bot
if __name__ == "__main__":
    bot.run()
